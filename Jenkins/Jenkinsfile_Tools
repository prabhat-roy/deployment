pipeline {
    agent any

    stages {
        stage('Git Checkout') {
            steps {
                script {
                    echo "📥 Checking out source code..."
                    checkout scm
                }
            }
        }

        stage('Inject Environment Variables') {
            steps {
                script {
                    def envLoader = load 'groovy/env_loader.groovy'
                    def envVars = envLoader.loadEnvVars("Jenkins.env")
                    envVars.each { key, val ->
                        env."${key}" = val
                        echo "Injected: ${key}=${val}"
                    }
                }
            }
        }

        stage('Detect Microservices') {
            steps {
                script {
                   def microLister = load 'groovy/detect_microservice.groovy'
                    microLister.writeServicesToEnv()
                }
            }
        }

        stage('Detect Cloud Provider') {
            steps {
                script {
                    def cloudScript = load 'groovy/detect_cloud.groovy'
                    cloudScript.detectAndSaveCloudProvider()
                }
            }
        }

        stage('Install Curl') {
            steps {
                script {
                    def curlInstaller = load 'groovy/install_curl.groovy'
                    curlInstaller.installCurl()
                }
            }
        }

        stage('Install Wget') {
            steps {
                script {
                    def wgetInstaller = load 'groovy/install_wget.groovy'
                    wgetInstaller.installWget()
                }
            }
        }
        
        stage('Install docker') {
            steps {
                script {
                    def dockerInstaller = load 'groovy/install_docker.groovy'
                    dockerInstaller.installDocker()
                }
            }
        }

    
    

    

    //     stage('Install Unzip') {
    //         steps {
    //             script {
    //                 // Install unzip utility
    //                 def unzipInstaller = load 'groovy/unzip.groovy'
    //                 unzipInstaller.installUnzip()
    //             }
    //         }
    //     }

    //     stage('Install GnuPG') {
    //         steps {
    //             script {
    //                 // Install GnuPG (GNU Privacy Guard) for secure communication
    //                 def gnupgInstaller = load 'groovy/gnupg.groovy'
    //                 gnupgInstaller.installGnupg()
    //             }
    //         }
    //     }

    //     stage('Install Make') {
    //         steps {
    //             script {
    //                 // Install GNU Make tool
    //                 def makeInstaller = load 'groovy/make.groovy'
    //                 makeInstaller.installMake()
    //             }
    //         }
    //     }

    //     stage('Install Python') {
    //         steps {
    //             script {
    //                 // Install Python runtime
    //                 def pythonInstaller = load 'groovy/python.groovy'
    //                 pythonInstaller.installPython()
    //             }
    //         }
    //     }
        
    //    stage('Install Node.js') {
    //         steps {
    //             script {
    //                 // Install Node.js runtime
    //                 def nodejsInstaller = load 'groovy/nodejs.groovy'
    //                 nodejsInstaller.installNodejs()
    //             }
    //         }
    //     }

    //     stage('Install Cloud CLI Tool') {
    //         steps {
    //             script {
    //                 // Install AWS CLI / Azure CLI / GCP CLI depending on cloud provider
    //                 def cliInstaller = load 'groovy/cloud_cli.groovy'
    //                 cliInstaller.installCloudCLI()
    //             }
    //         }
    //     }

    //     stage('Install Terraform') {
    //         steps {
    //             script {
    //                 // Install Terraform CLI
    //                 def terraformInstaller = load 'groovy/terraform.groovy'
    //                 terraformInstaller.installTerraform()
    //             }
    //         }
    //     }

    //     stage('Install Kubernetes CLI Tools') {
    //         steps {
    //             script {
    //                 // Install kubectl, helm, kustomize, etc.
    //                 def kubernetesInstaller = load 'groovy/install_kubernetes.groovy'
    //                 kubernetesInstaller.installKubernetes()
    //             }
    //         }
    //     }

    //     stage('Archive Jenkins.env') {
    //         steps {
    //             script {
    //                 // Archive Jenkins.env for visibility and stash for next pipeline usage
    //                 archiveArtifacts artifacts: 'Jenkins.env', onlyIfSuccessful: true
    //                 stash name: 'env-file', includes: 'Jenkins.env'
    //             }
    //         }
    //     }

        stage('Clean Workspace') {
            steps {
                script {
                    // Remove all workspace files for a clean start in next run
                    deleteDir()
                    echo "Workspace deleted."
                }
            }
        }

        stage('Graceful Jenkins Restart') {
            when {
                expression { currentBuild.result == null || currentBuild.result == 'SUCCESS' }
            }
            steps {
                echo "⚙️ Scheduling Jenkins restart via systemctl..."
                sh '''
                    LOG_FILE="/var/log/jenkins-custom/jenkins-restart.log"
                    sudo mkdir -p /var/log/jenkins-custom
                    sudo chown jenkins:jenkins /var/log/jenkins-custom
                    echo "⏱️ Restart scheduled at $(date)" | sudo tee -a "$LOG_FILE"
                    nohup bash -c "sleep 10 && echo '🔁 Restarting Jenkins at $(date)' | sudo tee -a $LOG_FILE && sudo systemctl restart jenkins" > /dev/null 2>&1 &
                    echo "✅ Jenkins will restart gracefully in 10 seconds (in background)."
                '''
            }
        }
    }
}