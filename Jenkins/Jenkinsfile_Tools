pipeline {
    agent any

    parameters {
        choice(name: 'action', choices: ['create', 'destroy'], description: 'Choose action: create or destroy')
    }

    stages {
        stage('Git Checkout') {
            steps {
                script {
                    echo "ðŸ“¥ Checking out source code..."
                    checkout scm
                }
            }
        }

        stage('Load Environment Variables') {
            steps {
                script {
                    def envLoader = load 'groovy/env_loader.groovy'
                    def envVars = envLoader.loadEnvVars("Jenkins.env")
                    envVars.each { key, val ->
                        env."${key}" = val
                        echo "Injected: ${key}=${val}"
                    }
                }
            }
        }

        // stage('Manage SonarQube') {
        //     steps {
        //         script {
        //             def sonarqubeInstaller = load 'groovy/install_sonarqube.groovy'
        //             if (params.action == 'create') {
        //                 sonarqubeInstaller.installSonarqube()
        //             } else if (params.action == 'destroy') {
        //                 sonarqubeInstaller.cleanupSonarqube()
        //             } else {
        //                 error "Invalid action: ${params.action}"
        //             }
        //         }
        //     }
        // }

        stage('Manage OWASP Dependency-Check') {
            steps {
                script {
                    def depCheckInstaller = load 'groovy/install_dependency_check.groovy'

                    if (params.action == 'create') {
                        depCheckInstaller.installDependencyCheck()
                    } else if (params.action == 'destroy') {
                        depCheckInstaller.cleanupDependencyCheck()
                    } else {
                        error "Invalid action: ${params.action}"
                    }
                }
            }
        }


        // stage('Archive Jenkins.env') {
        //     steps {
        //         script {
        //             // Archive Jenkins.env for visibility and stash for next pipeline usage
        //             archiveArtifacts artifacts: 'Jenkins.env', onlyIfSuccessful: true
        //             stash name: 'env-file', includes: 'Jenkins.env'
        //         }
        //     }
        // }

        stage('Clean Workspace') {
            steps {
                script {
                    // Remove all workspace files for a clean start in next run
                    deleteDir()
                    echo "Workspace deleted."
                }
            }
        }
    }
}


