pipeline {
    agent any
    
    stages {
        stage('Git Checkout') {
            steps {
                script {
                    checkout scm
                    }
                }
            }
        stage('Load Environment Variables') {
            steps {
                script {
                    def envFile = readFile('Jenkins.env').split('\n')
                    def envUtil = load "groovy/LoadEnvVars.groovy"
                    def envVars = envUtil.loadEnvVars("Jenkins.env")

                        // Inject into env
                        envVars.each { key, val ->
                        env."${key}" = val
                        echo "Injected: ${key}=${val}"
                    }
                }
            }
         }        
        stage('Detect Cloud Provider') {
            steps {
                script {
                    def cloudScript = load 'groovy/detect_cloud.groovy'
                    cloudScript.detectAndSaveCloudProvider()
                    archiveArtifacts artifacts: 'Jenkins.env', onlyIfSuccessful: true
                    stash name: 'env-file', includes: 'Jenkins.env'
                }
            }
        }
         stage('Install Curl') {
            steps {
                script {
                    def curlInstaller = load 'groovy/curl.groovy'
                    curlInstaller.installCurl()
                }
            }
        }
        stage('Install Unzip') {
            steps {
                script {
                    def unzipInstaller = load 'groovy/unzip.groovy'
                    unzipInstaller.installUnzip()
                }
            }
        }
        stage('Install wget') {
            steps {
                script {
                    def wgetInstaller = load 'groovy/wget.groovy'
                    wgetInstaller.installWget()
                }
            }
        }
        stage('Install gnupg') {
            steps {
                script {
                    def gnupgInstaller = load 'groovy/gnupg.groovy'
                    gnupgInstaller.installGnupg()
                }
            }
        }
        stage('Install make') {
            steps {
                script {
                    def makeInstaller = load 'groovy/make.groovy'
                    makeInstaller.installMake()
                }
            }
        }
        stage('Install python') {
            steps {
                script {
                    def pythonInstaller = load 'groovy/python.groovy'
                    pythonInstaller.installPython()
                }
            }
        }
        stage('Install Cloud CLI Tool') {
            steps {
                script {
                    def cliInstaller = load 'groovy/cloud_cli.groovy'
                    cliInstaller.installCloudCLI()
                }
            }
        }
       stage('Install go') {
            steps {
                script {
                    def goInstaller = load 'groovy/go.groovy'
                    goInstaller.installGo()
                }
            }
        }
        stage('Install nodejs') {
            steps {
                script {
                    def nodejsInstaller = load 'groovy/nodejs.groovy'
                    nodejsInstaller.installNodejs()
                }
            }
        }
        stage('Install terraform') {
            steps {
                script {
                    def terraformInstaller = load 'groovy/terraform.groovy'
                    terraformInstaller.installTerraform()
                }
            }
        }        
        stage('Install kubernetes') {
            steps {
                script {
                    def kubernetesInstaller = load 'groovy/kubernetes.groovy'
                    kubernetesInstaller.installKubernetes()
                }
            }
        }
        // stage('Install sonarqube') {
        //     steps {
        //         script {
        //             def sonarqubeInstaller = load 'groovy/sonarqube.groovy'
        //             sonarqubeInstaller.installSonarqube()
        //         }
        //     }
        // }
        // stage('Install owasp') {
        //     steps {
        //         script {
        //             def owaspInstaller = load 'groovy/owasp.groovy'
        //             owaspInstaller.installOwasp()
        //         }
        //     }
        // }
        stage('Deleting Workspace') {
            steps {
                script {
                    deleteDir()
                    echo "Workspace deleted."
                }
            }
        }

    }
}    
