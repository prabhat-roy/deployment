pipeline {
    agent any

    parameters {
        choice(name: 'action', choices: ['create', 'destroy'], description: 'Create or Destroy repo & cluster')
    }

    stages {
        stage('Git Checkout') {
            steps {
                script {
                    echo "ðŸ“¥ Checking out source code..."
                    checkout scm
                }
            }
        }
        
        stage('Inject Environment Variables') {
            steps {
                script {
                    def envLoader = load 'groovy/env_loader.groovy'
                    def envVars = envLoader.loadEnvVars("Jenkins.env")
                    envVars.each { key, val ->
                        env."${key}" = val
                        echo "Injected: ${key}=${val}"
                    }
                }
            }
        }

        stage('Detect Microservices') {
            steps {
                script {
                    def microLister = load 'groovy/detect_microservice.groovy'
                    microLister.writeServicesToEnv()
                }
            }
        }

        stage('Detect Cloud Provider') {
            steps {
                script {
                    def cloudScript = load 'groovy/detect_cloud.groovy'
                    cloudScript.detectAndSaveCloudProvider()
                }
            }
        }

        stage('Manage Repository') {
            steps {
                script {
                    def cloudRepo = load 'groovy/cloud_repo.groovy'
                    cloudRepo.manageRepository(params.action)
                }
            }
        }
        
        stage('Manage Kubernetes Cluster') {
            steps {
                script {
                    def k8sManager = load 'groovy/kubernetes_cluster.groovy'
                    k8sManager.manageKubernetes(params.action)
                }
            }
        }

        // stage('Manage Kubernetes Autoscaler') {
        //     steps {
        //         script {
        //             def autoscaler = load 'groovy/manage_autoscaler.groovy'
        //             autoscaler.manageAutoscaler(params.action)
        //         }
        //     }
        // }

        // stage('Manage Autoscaler - ${action}') {
        //     steps {
        //         script {
        //             def karpenterAutoscaler = load 'groovy/karpenter_autoscaler.groovy'

        //             if (params.action == 'create') {
        //                 echo "Installing Karpenter autoscaler..."
        //                 karpenterAutoscaler.install()
        //             } else if (params.action == 'destroy') {
        //                 echo "Uninstalling Karpenter autoscaler..."
        //                 infraManager.uninstall()
        //             } else {
        //                 error "Invalid action parameter: ${params.action}"
        //             }
        //         }
        //     }
        // }

        // stage('Manage HPA KEDA - ${action}') {
        //     steps {
        //         script {
        //             def hpaKeda = load 'groovy/hpa_keda.groovy'

        //             if (params.action == 'create') {
        //                 echo "Installing HPA KEDA..."
        //                 hpaKeda.install()
        //             } else if (params.action == 'destroy') {
        //                 echo "Uninstalling HPA KEDA..."
        //                 hpaKeda.uninstall()
        //             } else {
        //                 error "Invalid action parameter: ${params.action}"
        //             }
        //         }
        //     }
        // }

        // stage('Manage Elastic Stack') {
        //     steps {
        //         script {
        //             def elasticManager = load 'groovy/elastic_stack.groovy'
        //             elasticManager.manageElasticStack(params.action)
        //         }
        //     }
        // }

        // stage('Manage Prometheeus Stack') {
        //     steps {
        //         script {
        //             def prometheusManager = load 'groovy/prometheus_stack.groovy'
        //             prometheusManager.managePrometheusStack(params.action)
        //         }
        //     }
        // }

        stage('Archive Jenkins.env') {
            steps {
                script {
                    // Archive Jenkins.env for visibility and stash for next pipeline usage
                    archiveArtifacts artifacts: 'Jenkins.env', onlyIfSuccessful: true
                    stash name: 'env-file', includes: 'Jenkins.env'
                }
            }
        }

        // stage('Clean Workspace') {
        //     steps {
        //         script {
        //             // Remove all workspace files for a clean start in next run
        //             deleteDir()
        //             echo "Workspace deleted."
        //         }
        //     }
        // }
    }
}

