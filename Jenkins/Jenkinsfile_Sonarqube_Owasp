pipeline {
    agent any

    parameters {
        choice(name: 'action', choices: ['create', 'destroy'], description: 'Choose action: create or destroy')
    }

    stages {
        stage('Git Checkout') {
            steps {
                script {
                    echo "üì• Checking out source code..."
                    checkout scm
                }
            }
        }

        stage('Load Environment Variables') {
            steps {
                script {
                    echo "üì¶ Attempting to copy Jenkins.env from 'Tools' pipeline..."
                    copyArtifacts projectName: 'Tools', filter: 'Jenkins.env', target: './', optional: false

                    if (!fileExists('Jenkins.env')) {
                        error "‚ùå Jenkins.env file not found after copyArtifacts. Failing the build."
                    }

                    echo "üìñ Reading and injecting environment variables from Jenkins.env..."
                    def props = readProperties file: 'Jenkins.env'

                    props.each { k, v ->
                        env."${k}" = v
                        echo "‚úÖ Injected: ${k}=${v}"
                    }

                    echo "üåç All environment variables successfully loaded from Jenkins.env"
                }
            }
        }

        // stage('Manage SonarQube') {
        //     steps {
        //         script {
        //             def sonarqubeInstaller = load 'groovy/install_sonarqube.groovy'
        //             if (params.action == 'create') {
        //                 sonarqubeInstaller.installSonarqube()
        //             } else if (params.action == 'destroy') {
        //                 sonarqubeInstaller.cleanupSonarqube()
        //             } else {
        //                 error "Invalid action: ${params.action}"
        //             }
        //         }
        //     }
        // }

        stage('Manage OWASP ZAP - ${action}') {
             steps {
                script {
                    // Load the groovy class definition
                    load 'groovy/install_dependency_check.groovy'
                    // Instantiate the class explicitly
                    def depCheckInstaller = new DependencyCheckInstaller(steps, env, params)

                    if (params.action == 'create') {
                        depCheckInstaller.installDependencyCheck()
                    } else if (params.action == 'destroy') {
                        depCheckInstaller.cleanupDependencyCheck()
                    } else {
                        error "Invalid action: ${params.action}"
                    }
                }
            }
            
        }

        stage('Archive Jenkins.env') {
            steps {
                script {
                    // Archive Jenkins.env for visibility and stash for next pipeline usage
                    archiveArtifacts artifacts: 'Jenkins.env', onlyIfSuccessful: true
                    stash name: 'env-file', includes: 'Jenkins.env'
                }
            }
        }

        stage('Clean Workspace') {
            steps {
                script {
                    // Remove all workspace files for a clean start in next run
                    deleteDir()
                    echo "Workspace deleted."
                }
            }
        }
    }
}


