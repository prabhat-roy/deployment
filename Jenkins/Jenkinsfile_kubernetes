pipeline {
    agent any
    parameters {
        choice(
            name: 'ACTION',
            choices: ['create', 'destroy'], 
            description: 'Choose whether to create or destroy kubernetes resources.'
        )
    }
    stages {
        stage('Git Checkout') {
            steps {
                script {
                    checkout scm
                    }
                }
            }
           stage('Load Environment Variables') {
                steps {
                    script {
                        echo "üì¶ Attempting to copy Jenkins.env from 'tools' pipeline..."
                        copyArtifacts projectName: 'tools', filter: 'Jenkins.env', target: './', optional: false

                        if (!fileExists('Jenkins.env')) {
                            error "‚ùå Jenkins.env file not found after copyArtifacts. Failing the build."
                        }

                        echo "üìñ Reading and injecting environment variables from Jenkins.env..."
                        def props = readProperties file: 'Jenkins.env'

                        props.each { k, v ->
                            env."${k}" = v
                            echo "‚úÖ Injected: ${k}=${v}"
                        }

                        echo "üåç All environment variables successfully loaded from Jenkins.env"
                    }
                }
            }

            stage('Create Cloud Repositories') {
                steps {
                    script {
                        def repoCreator = load 'groovy/cloud_repo.groovy'
                        repoCreator.createCloudRepo(params.ACTION)
                    }
                }
            }
            
    }
}

        
