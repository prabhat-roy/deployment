pipeline {
    agent any

    parameters {
        choice(
            choice(name: 'action', choices: ['create', 'destroy'], description: 'Create or Destroy Deployment')
        )
    }

    stages {
        stage('Git Checkout') {
            steps {
                script {
                    echo "üì• Checking out source code..."
                    checkout scm
                }
            }
        }

        stage('Load Environment Variables') {
            steps {
                script {
                    echo "üì¶ Copying Jenkins.env from 'Monitoring' pipeline..."
                    copyArtifacts projectName: 'setup', filter: 'Jenkins.env', target: './', optional: false

                    if (!fileExists('Jenkins.env')) {
                        error "‚ùå Jenkins.env file not found. Aborting build."
                    }

                    echo "üìñ Loading environment variables using env_loader.groovy..."
                    def envLoader = load 'groovy/env_loader.groovy'
                    def envMap = envLoader.loadEnvVars('Jenkins.env')

                    envMap.each { k, v ->
                        env."${k}" = v
                        echo "‚úÖ Loaded: ${k}=${v}"
                    }

                    echo "üåç All variables successfully loaded into the environment"
                }
            }
        }

        stage('Trivy Source Code Scan') {
            steps {
                script {
                    def trivyScan = load 'groovy/trivy_fs.groovy'
                    trivyScan.scanAndArchiveFS()
                }
            }
        }

        stage('Run Pylint') {
            steps {
                script {
                    def pylintScript = load 'groovy/pylint.groovy'
                    pylintScript.runPylintScan()
                }
            }
        }

        stage('ESLint Scan') {
                steps {
                    script {
                        def eslintScan = load 'groovy/eslint.groovy'  // Load the ESLint scan script
                        eslintScan.runESLintAndArchiveReports()  // Run the ESLint scan and archive the reports
                    }
                }
            }

            stage('Flake8 Scan') {
                steps {
                    script {
                        def flake8Scan = load 'groovy/flake8.groovy'  // Load the Flake8 scan Groovy script
                        flake8Scan.runFlake8AndArchiveReports()       // Run the scan and archive the reports
                    }
                }
            }

        stage('FOSSA Scan') {
            steps {
                script {
                    withCredentials([string(credentialsId: 'fossa-api-key', variable: 'FOSSA_API_KEY')]) {
                        def fossaScan = load 'groovy/fossa.groovy'
                        fossaScan.runFossaScanAndArchiveReports(FOSSA_API_KEY)
                    }
                }
            }
        }
            
        stage('GitGuardian Scan') {
            steps {
                script {
                    withCredentials([string(credentialsId: 'gitguardian-api-key', variable: 'GITGUARDIAN_API_KEY')]) {
                        def gitguardianScan = load 'groovy/git_guardian.groovy'  // Load the GitGuardian scan Groovy script
                        gitguardianScan.runGitGuardianScanAndArchiveReports(GITGUARDIAN_API_KEY)  // Run the scan and archive the report
                    }
                }
            }
        }

        stage('Gitleaks Scan') {
            steps {
                script {
                    def gitleaksScan = load 'groovy/gitleaks.groovy'
                    gitleaksScan.runGitleaksScanAndArchiveReports()
                }
            }
        }

        stage('GolangCI-Lint Scan') {
            steps {
                script {
                    def golangciScan = load 'groovy/golangci.groovy'
                    golangciScan.runGolangCILintAndArchiveReports()
                }
            }
        }

        stage('Run Pyflakes') {
            steps {
                script {
                    def pyflakesScript = load 'groovy/pyflakes.groovy'
                    pyflakesScript.runPyflakesScan()
                }
            }
        }

        stage('Run Tox') {
            steps {
                script {
                    def toxScript = load 'groovy/tox.groovy'
                    toxScript.runToxScan()
                }
            }
        }

        stage('Run TruffleHog') {
            steps {
                script {
                    def truffleHogScript = load 'groovy/truffle_hog.groovy'
                    truffleHogScript.runTruffleHog()
                }
            }
        }

        stage('Run ShellCheck') {
            steps {
                script {
                    def shellCheckScript = load 'groovy/shell_check.groovy'
                    shellCheckScript.runShellCheck()
                }
            }
        }

        stage('Run License Checker') {
            steps {
                script {
                    def licenseCheckScript = load 'groovy/license_check.groovy'
                    licenseCheckScript.runLicenseChecker()
                }
            }
        }

        stage('KICS Scan') {
            steps {
                script {
                    def kicsScan = load 'groovy/kicsclean.groovy'  // Load the KICS scan Groovy script
                    kicsScan.pullAndScanIaC()                  // Run the scan and archive the reports
                }
            }
        }

        stage('Run Tern License Checker') {
            steps {
                script {
                    def ternCheckScript = load 'groovy/tern_check.groovy'
                    ternCheckScript.runTernCheck()
                }
            }
        }

        stage('Run OpenSCAP Security Audit') {
            steps {
                script {
                    def openSCAPCheckScript = load 'groovy/open_scap_heck.groovy'
                    openSCAPCheckScript.runOpenSCAPAudit()
                }
            }
        }

        stage('Create Docker Images') {
            steps {
                script {
                    def dockerBuild = load 'groovy/docker_build.groovy'
                    dockerBuild.createDockerBuild()
                }
            }
        }

        stage('Grype Scan') {
            steps {
                script {
                    def grypeScan = load 'groovy/grype.groovy'
                    grypeScan.scanAndArchiveImages()
                }
            }
        }

        stage('KICS Scan (Infrastructure as Code Security)') {
            steps {
                script {
                    def kicsScript = load 'groovy/kics_security_scan.groovy'
                    kicsScript.runKicsScan()
                }
            }
        }

        stage('KICS Scan (Code Cleanliness)') {
            steps {
                script {
                    def kicsCleanScript = load 'groovy/kics_cleanliness.groovy'
                    kicsCleanScript.runKicsCleanScan()
                }
            }
        }

        stage('Terrascan Scan (Terraform Security)') {
            steps {
                script {
                    def terrascanScript = load 'groovy/terrascan.groovy'
                    terrascanScript.runTerrascanScan()
                }
            }
        }

        stage('tfsec Scan (Terraform Security)') {
            steps {
                script {
                    def tfsecScript = load 'groovy/tfsec.groovy'
                    tfsecScript.runTfsecScan()
                }
            }
        }

        stage('Kubescape Security Scan') {
            steps {
                script {
                    def kubescapeScript = load 'groovy/kubescape.groovy'
                    kubescapeScript.runKubescapeScan()
                }
            }
        }

        stage('kube-bench Security Scan') {
            steps {
                script {
                    def kubeBenchScript = load 'groovy/kube_bench.groovy'
                    kubeBenchScript.runKubeBenchScan()
                }
            }
        }

        stage('kube-hunter Security Scan') {
            steps {
                script {
                    def kubeHunterScript = load 'groovy/kube_hunter.groovy'
                    kubeHunterScript.runKubeHunterScan()
                }
            }
        }

        stage('cnspec Security Scan') {
            steps {
                script {
                    def cnspecScript = load 'groovy/cnspec.groovy'
                    cnspecScript.runCnspecScan()
                }
            }
        }

        stage('cnode Security Scan') {
            steps {
                script {
                    def cnodeScript = load 'groovy/cnode.groovy'
                    cnodeScript.runCnodeScan()
                }
            }
        }

        stage('Kubeaudit Security Scan') {
            steps {
                script {
                    def kubeauditScript = load 'groovy/kubeaudit.groovy'
                    kubeauditScript.runKubeauditScan()
                }
            }
        }

        stage('Tetragon Security Monitoring') {
            steps {
                script {
                    def tetragonScript = load 'groovy/tetragon.groovy'
                    tetragonScript.runTetragonScan()
                }
            }
        }

        stage('Threat Intelligence - MITRE ATT&CK Integration') {
            steps {
                script {
                    def threatQScript = load 'groovy/mitre.groovy'
                    threatQScript.runThreatQMITREIntegration()
                }
            }
        }

        stage('OWASP Dependency-Check') {
            steps {
                script {
                    def owaspScan = load 'groovy/scan_owasp_dependency_check.groovy'
                    owaspScan.call()
                }
            }
        }

        stage('Semgrep Scan') {
            steps {
                script {
                    def semgrep = load 'groovy/semgrep.groovy'
                    semgrep.scanWithSemgrep()
                }
            }
        }

        stage('Spectral Scan') {
            steps {
                script {
                    def spectral = load 'groovy/spectral.groovy'
                    spectral.scanWithSpectral()
                }
            }
        }
            
        stage('Trivy Image Scan') {
            steps {
                script {
                    def trivyScan = load 'groovy/trivy_image.groovy'
                    trivyScan.scanAndArchiveImages()
                }
            }
        }

        stage('Anchore Image Scan') {
            steps {
                script {
                    def anchoreScan = load 'groovy/anchore_image.groovy'
                    anchoreScan.scanAndArchiveImages()
                }
            }
        }

        stage('Bandit Scan') {
            steps {
                script {
                    def banditScan = load 'groovy/bandit.groovy'
                    banditScan.scanAndArchiveReports()
                }
            }
        }

        stage('Brakeman Scan') {
            steps {
                script {
                    def brakemanScan = load 'groovy/brakeman.groovy'
                    brakemanScan.scanAndArchiveReports()
                }
            }
        }

        stage('Checkov Scan') {
            steps {
                script {
                    def checkovScan = load 'groovy/checkov.groovy'
                    checkovScan.scanAndArchiveReports()
                }
            }
        }

        stage('Clair Scan') {
            steps {
                script {
                    def clairScan = load 'groovy/clair.groovy'
                    clairScan.scanAndArchiveReports()
                }
            }
        }

        stage('CNSpec Scan') {
            steps {
                script {
                    def cnspecScan = load 'groovy/cnspec.groovy'
                    cnspecScan.scanAndArchiveReports()
                }
            }
        }

        stage('CodeQL Scan') {
            steps {
                script {
                    def codeqlScan = load 'groovy/codeql.groovy'
                    codeqlScan.scanAndArchiveReports()
                }
            }
        }

        stage('Docker Scout Scan') {
            steps {
                script {
                    def dockerScoutScan = load 'groovy/docker_scout.groovy'
                    dockerScoutScan.scanAndArchiveReports()
                }
            }
        }
            
        stage('Cosign Scan') {
            steps {
                script {
                    def cosignScan = load 'groovy/cosign.groovy'
                    cosignScan.signAndVerifyImages()
                }
            }
        }

        stage('Docker Push') {
            steps {
                script {
                    def dockerPush = load 'groovy/docker_push.groovy'
                    dockerPush.pushImages()
                }
            }
        }
            
        stage('Deploy to Kubernetes') {
            when {
                expression { params.ACTION == 'create' }
            }
            steps {
                script {
                    def deployToK8s = load('groovy/deploykubernetes.groovy')
                    deployToK8s.deployToKubernetes()
                }
            }
        }

        stage('ZAP Scan') {
            when {
                expression { params.ACTION == 'create' }
            }
            steps {
                script {
                    def runZAPScan = load('groovy/Zap.groovy')
                    runZAPScan.runZAPScan()
                }
            }
        }

        stage('Archive Reports and Send Email') {
            steps {
                script {
                    def archiveAndEmail = load('groovy/email.groovy')
                    archiveAndEmail.archiveAndEmailReports()
                }
            }
        }
            
        stage('Destroy Kubernetes Resources') {
            when {
                expression { params.ACTION == 'destroy' }
            }
            steps {
                script {
                    echo "Destroying Kubernetes resources..."
                    def destroyK8sResources = load('groovy/DestroyKubernetes.groovy')
                    destroyK8sResources.destroyResources()
                }
            }
        }
            
        stage('Delete Docker Images from Private Repo') {
            when {
                expression { params.ACTION == 'destroy' }
            }
            steps {
                script {
                    def deleteDockerImages = load 'groovy/DeleteDockerImagesFromPrivateRepo.groovy'
                    deleteDockerImages.deleteDockerImagesFromPrivateRepo()
                }
            }
        }
        
        stage('Delete Docker Images') {
            when {
                expression { params.ACTION == 'create' }
            }
            steps {
                script {
                    def deleteDockerImages = load('groovy/DeleteDockerImages.groovy')
                    deleteDockerImages.deleteDockerImages()
                }
            }
        }
    }
}